#!/root/anaconda3/envs/pentest/bin/python

import nmap
import sys
import time
import sh

def vulns(ipaddress,arguments):
    scanner = nmap.PortScanner()
    targets = []
    scan1 = scanner.scan(hosts=ipaddress, arguments=arguments)

#The scan will return in dictionary of dictionaries
def all_tcp_udp(ipaddress):
    scanner = nmap.PortScanner()
    #sT for full TCP Connect Scan, -p- scans all 65535 ports, T3 is default timing control template and can range from 0(paranoid/slower/ids evasion) to 5(insane and fast), host timeout set to 30m on unresponsive hosts
    #version intensity check(0-9)
    #-p- for all 65535 ports
    #T5 for insane timer tuning
    print("starting all TCP ports scan")
    scanner.scan(hosts=ipaddress, arguments='-oN alltcp.nmap -sS -T4 -p-')
    print(f"alltcp.nmap file written\n{scanner.command_line()}")
    TCP_dict = scanner[ipaddress]['tcp'].keys()
    discovered_TCP = []
    for key in TCP_dict:
        discovered_TCP.append(str(key))
    TCPports = ','.join(discovered_TCP)#used to turn a list of into space separated string
    #print(discovered_TCP)    
    #print("Starting version-intensity/vulners script on",TCPports)
    #scanner.scan(hosts=ipaddress,arguments=f'-oN vulners.nmap -sV --version-intensity 9 --script vulners -p {TCPports}')
    # Offer additional nSE commands to run
    time.sleep(1)
    print("\nAdditional Enumeration Scans:")
    if  any(x in TCP_dict for x in [80,8080]): # like an OR statement if 80 or 8080 are found do something
        print(f'unix:\n\tnmap -oN http.nmap --script "http* and not http-brute* and not http-slowloris* and not http-rfi-spider* and not http-sql-injection* and not http-form* and not http-iis*" --script-args= -d -T2 -Pn -sV -T2 -vv -p 80 {ip}')
        time.sleep(1)
        print(f'IIS:\n\tnmap -oN http.nmap --script "http* and not http-brute* and not http--brute and not http-slowloris* and not http-rfi-spider* and not http-sql-injection* and not http-form*" --script-args= -d -T2 -Pn -sV -T2 -vv -p 80 {ip}')
        time.sleep(1)
        print(f'\tnikto -o nikto.txt -h {ip}')
        time.sleep(1)
    #RUN UDP PORT SCANS
    try:
        print("\nStarting top 100 UDP port scan")
        scanner.scan(hosts=ipaddress, arguments='-oN Top100udp.nmap -sV -sU -T2 --top-ports 10')
        UDP_dict = scanner[ipaddress]['udp'].keys()
        if 161 in UDP_dict:
            print(f'Port 161:\n\tnmap -oN snmp.nmap -sV -Pn -sU -T2 --script=snmp-brute -p 161 {ip}')
        discovered_UDP = []
        for key in UDP_dict:
            discovered_UDP.append(str(key))
        UDPports = ','.join(discovered_UDP)#used to turn a list of into space separated string
        print(f"\n USE THE enum.sh Script For these Targeted Scans\nOPEN TCP:\t{TCPports}\nOPEN TOP 100 UDP:\t{UDP_dict}")
        time.sleep(1)
        print("\nStarting version-intensity/vulners script")
        scanner.scan(hosts=ipaddress,arguments=f'-oN vulners.nmap -sU -sS -sV --version-intensity 9 -T3 --script vulners -p T:{TCPports},U:{UDPports}')
        print("\nConverting vulners.nmap to vulners.csv with nmaptocsv")
        sh.nmaptocsv("-i","vulners.nmap","-o","vulners.csv") # uses nmaptocsv to convert into a csv file for targeted-nmap.py to use
        print("""\ncheck exploit-db against vulners data: \n\tcat vulners.nmap | awk '{print $4}' | grep http | xargs -I '{}' sh -c 'curl -s {} | grep -i -b -c exploit-db.com && echo "{}"' > exploit-db_vulners.txt""")
        time.sleep(1)
        print("\nStarting all UDP ports scan")
        scanner.scan(hosts=ipaddress, arguments='-oN alludp.nmap -sU -T3 -p-')
        UDP_dict = scanner[ipaddress]['udp'].keys()
        print("\nALL OPEN UDP PORTS: ",UDP_dict)
    except Exception as e:
        print("error in UDP scans: ",e)
        print(f"nmap -oN vulners.nmap -sV --version-intensity 9 --script vulners -T3 -p {TCPports} {ip}")
try:
    ip = sys.argv[1]
    all_tcp_udp(ip)
except Exception as e:
    print(e,"ERROR OCURRED")
    print("usage: initial-nmap.py <enter ip address>")
    print("YOU MUST ENUMERATE, If All else fails run this \nnmap -T4 -oN top10000tcp.nmap -sV -A --top-ports=10000 {ip}")
