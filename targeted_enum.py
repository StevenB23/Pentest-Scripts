#!/root/anaconda3/envs/pentest/bin/python

# Basically we will pass a csv file to this script to then perform the rest of our targeted scans to identify vulns
import nmap
import pandas as pd
import sys
import re


csv = sys.argv[1] # argument for the csv that will parse for the ports and services
# first convert the vulners -oN file with nmaptocsv(must activate python27 kernel)
# csv = '/root/oscp/lab-net2019/hosts/phoenix/enum/vulners.csv' # location of csv file sysarg 1?

def dataframe(file):
    df = pd.read_csv(csv, sep=';') # separator is a semicolon not comma so must specify
    df.set_index('PORT',inplace=True) # since the ports should be unique we can properly iterate and grab data by making the ports column our index
    return df

try:
    df = dataframe(csv)
    ports = df.index.tolist()
except Exception as e:
    print("failed, did you input the vulners.csv?",e)

# Define the IP in the scan
ip = [i for i in df['IP']] # Create list of the IP column which is all the same ip
ip = ip[0] #re create the ip var as only the ip we need by slicing the first value out being our IPaddress
    
# define the ports for each service that will be used in list format. This is done to avoid rescanning ports with the same scan and can group them
port=None
http_ports = []
iis_ports = []
ftp_ports = []
ssh_ports = []
ssl_ports = []
smtp_ports = []
smb_ports = []
imap_ports = []
mysql_ports = []
rdp_ports = []
vnc_ports = []
ldap_ports = []
telnet_ports = []
snmp_ports = []
mssql_ports = []
other_ports = []

# Append ports to their lists from the vulners csv turned df
for port in ports:
    service = df['SERVICE'][port]
    version = df['VERSION'][port]
#     ip = df['IP'][port]
#     print(port,service,version)
    if "http" in str(service) and "IIS" not in str(version): #scan using unix scan if iis not present
        http_ports.append(str(port))
    elif re.search('iis', str(version),re.IGNORECASE): #if iis(case  insensitive) is in version lets append the port to our iis port lists
        iis_ports.append(str(port))
    elif "ftp" in str(service):
        ftp_ports.append(str(port))
    elif "ssh" in str(service):
        ssh_ports.append(str(port))
    elif "ssl" in str(service):
        ssl_ports.append(str(port))
    elif "smtp" in str(service):
        smtp_ports.append(str(port))
    elif "netbios" in str(service):
        smb_ports.append(str(port))
    elif "microsoft-ds" in str(service):
        smb_ports.append(str(port))
    elif "imap" in str(service):
        imap_ports.append(str(port))
    elif "mysql" in str(service):
        mysql_ports.append(str(port))
    elif "ms-sql" in str(service):
        mssql_ports.append(str(port))
    elif "rdp" in str(service):
        rdp_ports.append(str(port))
    elif "vnc" in str(service):
        vnc_ports.append(str(port))
    elif "ldap" in str(service):
        ldap_ports.append(str(port))
    elif "telnet" in str(service):
        telnet_ports.append(str(port))
    elif "snmp" in str(service):
        snmp_ports.append(str(port))
    else:
        other_ports.append(str(port)) #the final catch all if the port doesn't match anything we still want to do something with it
        
#NMAP ports formatted for input into the nmap scans, basically makes our python list comma separated        
ssh_ports = ','.join(ssh_ports)
http_ports = ','.join(http_ports)
iis_ports = ','.join(iis_ports)
ftp_ports = ','.join(ftp_ports)
ssl_ports = ','.join(ssl_ports)
smtp_ports = ','.join(smtp_ports)
smb_ports = ','.join(smb_ports)
imap_ports = ','.join(imap_ports)
mysql_ports = ','.join(mysql_ports)
rdp_ports = ','.join(rdp_ports)
vnc_ports = ','.join(vnc_ports)
telnet_ports = ','.join(telnet_ports)
snmp_ports = ','.join(snmp_ports)
ldap_ports = ','.join(ldap_ports)
mssql_ports = ','.join(mssql_ports)
other_ports = ','.join(set(other_ports)) # make the  list unique so we can also run udp scans here and not have a warning error for duplicates in nmap


# NMAP arguments
http_args = f'''--script "http* and not http-brute* and not http-slowloris* and not http-rfi-spider* and not http-sql-injection* and not http-form* and not http-iis*" --script-args= -sV -oN http.nmap -Pn -T3 -vv -p '''
iis_args = f'''--script "http* and not http-brute* and not http-slowloris* and not http-rfi-spider* and not http-sql-injection* and not http-form*" --script-args= -d -oN iis.nmap -T2 -Pn -sV -T2 -vv -p '''
#ftp_args = f'''-d -sV -T2 -Pn -v -p '''
ftp_args = f'''--script "ftp-* and not ftp-brute*" --script-args= -d -oN ftp.nmap -T2 -Pn -v -p '''
apache_args = '''-d -sV -T2 -Pn -p '''
ssh_args='''--script "ssh* and not ssh-brute*" --script-args= -d -oN ssh.nmap -sV -T2 -Pn -v -p'''
smtp_args='''--script "smtp-commands,smtp-enum-users,smtp-ntlm-info,smtp-open-relay,smtp-vuln-cve2010-4344,smtp-vuln-cve2011-1720,smtp-vuln-cve2011-1764" --script-args= -d -oN smtp.nmap -v -sV --version-intensity 9 -Pn -T2 -p '''
smb_args = f'''--script "smb-* and not smb-brute* and not smb-flood" --script-args= -d -oN smb.nmap -Pn -sV -T2-v -p '''
ssl_args = f'''--script ssl-enum-ciphers,ssl-ccs-injection,ssl-cert,ssl-date,ssl-dh-params,ssl-heartbleed,ssl-known-key,ssl-poodle,sslv2,sslv2-drown --script-args= -d -oN https.nmap -v -p '''
mysql_args = f'''--script "mysql-empty-password,mysql-enum,mysql-info,mysql-users,mysql-variables,mysql-vuln-cve2012-2122" --script-args=query="SELECT host, user FROM mysql.user" -d -oN mysql.nmap -sV  -Pn -T2 -v -p '''
rdp_args = f'''--script "rdp-enum-encryption,rdp-vuln-ms12-020" --script-args= -d -oN rdp.nmap -sV  -T2 -Pn -v -p 3389 '''
vnc_args = f'''--script "*vnc* and not *brute*" --script-args= -d -oN vnc.nmap -sV --version-intensity 9 -Pn -v  -T3 -p '''
ldap_args = f'''--script "ldap* and not ldap-brute" --script-args= -oN ldap.nmap -sV --version-intensity 9  -Pn -T2 -p '''
snmp_args = f'''--script=snmp-brute -oN snmp.nmap -sV -Pn -sU -T2 -p '''
telnet_args = f'''--script "telnet* and not telnet-brute" --script-args= -d oN telnet.nmap -Pn -v -T2 -p '''
imap_args = f'''--script "imap-capabilities,imap-ntlm-info,imap-brute" --script-args= -d -oN imap.nmap -T2  -Pn -v -p '''
mssql_args = f'''--script "ms-sql* and not ms-sql-brute*" "--script-args=mssql.username=sa,mssql.password=sa,ms-sql-config.showall=true,ms-sql-tables.maxdb=0,ms-sql-tables.maxtables=0,ms-sql-xp-cmdshell.cmd=ipconfig /all" -d -oN mssql.nmap -Pn -v -sV --version-intensity 9 -T2 -p '''
other_args = f'''--script=default -sU -sS -sV --version-intensity 9 -oN other.nmap -T2 -p ''' # DONT FORGET the "-p" arg at the end with a space! Because we might have udp ports caught here run both the -sU -sS switches
# Create Dictionary of the ports and their commands for use in a function to reduce coding more than is needed
params_dict={ssh_ports:ssh_args,http_ports:http_args,iis_ports:iis_args,ftp_ports:ftp_args,ssl_ports:ssl_args,
             smtp_ports:smtp_args,smb_ports:smb_args,imap_ports:imap_args,mysql_ports:mysql_args,rdp_ports:rdp_args,
             vnc_ports:vnc_args,telnet_ports:telnet_args,snmp_ports:snmp_args,ldap_ports:ldap_args,mssql_ports:mssql_args,
             other_ports:other_args}

print("OTHERPORTS: ", other_ports)
count = 0


# The function to execute the scans
def execute_scan(ports,args):
    if port !='': # if port supplied isn't empty try something
        try:
            scanner = nmap.PortScanner()
            scanner.scan(hosts=str(ip), arguments=args+str(ports))# must add port here
            print(scanner.csv()) # prints csv of basic details but would write nse script output to the given file
        except Exception as e:
            print(e)

# The loop to enter each dict item of ports/args into the function
for port,args in params_dict.items():
    if port !='': # Verify the port param we pass isn't empty
        print(port,args,'\n')
        count+=1
        execute_scan(port,args)